diff --git a/core/modules/rest/lib/Drupal/rest/EventSubscriber/RouteSubscriber.php b/core/modules/rest/lib/Drupal/rest/EventSubscriber/RouteSubscriber.php
index d4711e0..35ce1d3 100644
--- a/core/modules/rest/lib/Drupal/rest/EventSubscriber/RouteSubscriber.php
+++ b/core/modules/rest/lib/Drupal/rest/EventSubscriber/RouteSubscriber.php
@@ -7,11 +7,13 @@
 namespace Drupal\rest\EventSubscriber;

 use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Entity\EntityNG;
 use Drupal\Core\Routing\RouteBuildEvent;
 use Drupal\Core\Routing\RoutingEvents;
 use Drupal\rest\Plugin\Type\ResourcePluginManager;

 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Component\Routing\Route;

 /**
  * Subscriber for REST-style routes.
@@ -51,7 +53,7 @@ public function __construct(ResourcePluginManager $manager, ConfigFactory $confi
    * @param \Drupal\Core\Routing\RouteBuildEvent $event
    *   The route building event.
    */
-  public function dynamicRoutes(RouteBuildEvent $event) {
+  public function resourceRoutes(RouteBuildEvent $event) {

     $collection = $event->getRouteCollection();

@@ -62,17 +64,71 @@ public function dynamicRoutes(RouteBuildEvent $event) {

         foreach ($plugin->routes() as $name => $route) {
           $route->setRequirement('_access_rest_csrf',  'TRUE');
-          $collection->add("rest.$name", $route);
+          $collection->add("rest.resource.$name", $route);
         }
       }
     }
   }

+  public function relationRoutes(RouteBuildEvent $event) {
+    $collection = $event->getRouteCollection();
+
+    $link_field_types = array(
+      'entity_reference',
+      'taxonomy_term_reference',
+    );
+
+    foreach (entity_get_bundles() as $entity_type => $bundles) {
+      foreach ($bundles as $bundle_name => $bundle) {
+        if (in_array($entity_type, array('comment', 'block'))) {
+          continue;
+        }
+        $entity = entity_create($entity_type, array('type' => $bundle_name));
+
+        $fields = $entity->getPropertyDefinitions();
+        foreach ($fields as $field_name => $field_definition) {
+          if ($field_definition['type'] == 'entity_reference_field') {
+            $route = new Route("/rest/relations/$entity_type/$bundle_name/$field_name", array(
+              '_controller' => 'Drupal\rest\Controller::relation',
+              'field_name' => $field_name,
+              'field_definition' => $field_definition,
+            ), array(
+              '_method' => 'GET',
+              '_access' => 'TRUE',
+            ));
+            $collection->add("rest.relation.$entity_type.$bundle_name.$field_name", $route);
+          }
+        }
+      }
+    }
+  }
+
+  public function typeRoutes(RouteBuildEvent $event) {
+    $collection = $event->getRouteCollection();
+
+    // @todo Change this to only expose info for REST enabled entity types.
+    foreach (entity_get_bundles() as $entity_type => $bundles) {
+      foreach ($bundles as $bundle_name => $bundle) {
+        $route = new Route("/rest/types/$entity_type/$bundle_name", array(
+          '_controller' => 'Drupal\rest\Controller::type',
+          'entity_type' => $entity_type,
+          'bundle' => $bundle_name,
+        ), array(
+          '_method' => 'GET',
+          '_access' => 'TRUE',
+        ));
+        $collection->add("rest.type.$entity_type.$bundle_name", $route);
+      }
+    }
+  }
+
   /**
    * Implements EventSubscriberInterface::getSubscribedEvents().
    */
   static function getSubscribedEvents() {
-    $events[RoutingEvents::DYNAMIC] = 'dynamicRoutes';
+    $events[RoutingEvents::DYNAMIC][] = array('resourceRoutes');
+    $events[RoutingEvents::DYNAMIC][] = array('relationRoutes');
+    $events[RoutingEvents::DYNAMIC][] = array('typeRoutes');
     return $events;
   }
 }
